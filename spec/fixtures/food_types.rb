# Generated by https://quicktype.io

require 'json'
require 'dry-types'
require 'dry-struct'

module Types
  include Dry::Types.module

  Int                           = Strict::Int
  Bool                          = Strict::Bool
  Hash                          = Strict::Hash
  String                        = Strict::String
  Double                        = Strict::Float | Strict::Int
  GeneralSearchInput            = Strict::String.enum("sweet potatoes")
  DataSource                    = Strict::String.enum("LI")
  DataTypeEnum                  = Strict::String.enum("Branded")
  Description                   = Strict::String.enum("SWEET POTATOES")
  FoodCategory                  = Strict::String.enum("Canned Vegetables", "Frozen Prepared Sides", "Pre-Packaged Fruit & Vegetables")
  DerivationCode                = Strict::String.enum("LCCD", "LCCS")
  FoodNutrientSourceDescription = Strict::String.enum("Manufacturer's analytical; partial documentation")
  UnitName                      = Strict::String.enum("G", "IU", "KCAL", "MG", "UG")
  MarketCountry                 = Strict::String.enum("United States")
  ServingSizeUnit               = Strict::String.enum("g")
end

class DataTypeClass < Dry::Struct
  attribute :branded,      Types::Int
  attribute :survey_fndds, Types::Int
  attribute :sr_legacy,    Types::Int
  attribute :foundation,   Types::Int
end

class Nutrients < Dry::Struct
end

class Aggregations < Dry::Struct
  attribute :data_type, DataTypeClass
  attribute :nutrients, Nutrients
end

module GeneralSearchInput
  SweetPotatoes = "sweet potatoes"
end

class FoodSearchCriteria < Dry::Struct
  attribute :query,                      Types::GeneralSearchInput
  attribute :general_search_input,       Types::GeneralSearchInput
  attribute :page_number,                Types::Int
  attribute :number_of_results_per_page, Types::Int
  attribute :page_size,                  Types::Int
  attribute :require_all_words,          Types::Bool
end

module DataSource
  Li = "LI"
end

module DataTypeEnum
  Branded = "Branded"
end

module Description
  SweetPotatoes = "SWEET POTATOES"
end

class FoodAttribute < Dry::Struct
  attribute :value,               Types::String
  attribute :food_attribute_name, Types::String
  attribute :id,                  Types::Int
end

class FoodAttributeType < Dry::Struct
  attribute :food_attribute_type_name, Types::String
  attribute :description,              Types::String
  attribute :id,                       Types::Int
  attribute :food_attributes,          Types.Array(FoodAttribute)
end

module FoodCategory
  CannedVegetables           = "Canned Vegetables"
  FrozenPreparedSides        = "Frozen Prepared Sides"
  PrePackagedFruitVegetables = "Pre-Packaged Fruit & Vegetables"
end

module DerivationCode
  Lccd = "LCCD"
  Lccs = "LCCS"
end

module FoodNutrientSourceDescription
  ManufacturerSAnalyticalPartialDocumentation = "Manufacturer's analytical; partial documentation"
end

module UnitName
  G    = "G"
  Iu   = "IU"
  Kcal = "KCAL"
  Mg   = "MG"
  Ug   = "UG"
end

class FoodNutrient < Dry::Struct
  attribute :nutrient_id,                      Types::Int
  attribute :nutrient_name,                    Types::String
  attribute :nutrient_number,                  Types::String
  attribute :unit_name,                        Types::UnitName
  attribute :derivation_code,                  Types::DerivationCode
  attribute :derivation_description,           Types::String
  attribute :derivation_id,                    Types::Int
  attribute :value,                            Types::Double
  attribute :food_nutrient_source_id,          Types::Int
  attribute :food_nutrient_source_code,        Types::String
  attribute :food_nutrient_source_description, Types::FoodNutrientSourceDescription
  attribute :rank,                             Types::Int
  attribute :indent_level,                     Types::Int
  attribute :food_nutrient_id,                 Types::Int
  attribute :percent_daily_value,              Types::Int.optional
end

module MarketCountry
  UnitedStates = "United States"
end

module ServingSizeUnit
  G = "g"
end

class Food < Dry::Struct
  attribute :fdc_id,                      Types::Int
  attribute :description,                 Types::Description
  attribute :lowercase_description,       Types::GeneralSearchInput
  attribute :data_type,                   Types::DataTypeEnum
  attribute :gtin_upc,                    Types::String
  attribute :published_date,              Types::String
  attribute :brand_owner,                 Types::String
  attribute :ingredients,                 Types::String
  attribute :market_country,              Types::MarketCountry
  attribute :food_category,               Types::FoodCategory
  attribute :modified_date,               Types::String
  attribute :data_source,                 Types::DataSource
  attribute :serving_size_unit,           Types::ServingSizeUnit
  attribute :serving_size,                Types::Int
  attribute :household_serving_full_text, Types::String.optional
  attribute :all_highlight_fields,        Types::String
  attribute :score,                       Types::Double
  attribute :food_nutrients,              Types.Array(FoodNutrient)
  attribute :final_food_input_foods,      Types.Array(Types::Any)
  attribute :food_measures,               Types.Array(Types::Any)
  attribute :food_attributes,             Types.Array(Types::Any)
  attribute :food_attribute_types,        Types.Array(FoodAttributeType)
  attribute :food_version_ids,            Types.Array(Types::Any)
  attribute :brand_name,                  Types::String.optional
  attribute :package_weight,              Types::String.optional
  attribute :short_description,           Types::String.optional
end

class Ruby < Dry::Struct
  attribute :total_hits,           Types::Int
  attribute :current_page,         Types::Int
  attribute :total_pages,          Types::Int
  attribute :page_list,            Types.Array(Types::Int)
  attribute :food_search_criteria, FoodSearchCriteria
  attribute :foods,                Types.Array(Food)
  attribute :aggregations,         Aggregations
end
